<script>
    function leafletInit() {
        const osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        });
        const satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri'
        });

        const map = L.map('map', {
            center: [50.0, 8.0],
            zoom: 13,
            layers: [osm]
        });

        const baseMaps = {
            "Karte": osm,
            "Satellit": satellite
        };
        L.control.layers(baseMaps).addTo(map);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        const elevationControl = L.control.elevation({
            position: "topright",
            theme: "lime-theme",
            detached: true,
            elevationDiv: "#elevation",
            followMarker: true,
            downloadLink: "link",
            distanceMarkers: true,
            translations: {
                distance: "Entfernung",
                elevation: "Höhe",
                segment_length: "Streckenlänge",
                total_length: "Gesamtlänge",
                total_ascent: "Gesamtanstieg",
                total_descent: "Gesamtabstieg",
                slope: "Steigung",
                speed: "Geschwindigkeit",
                time: "Zeit",
                info: "Info",
                avg_speed: "Ø Geschwindigkeit",
                min_elev: "Tiefster Punkt",
                max_elev: "Höchster Punkt",
                gain: "Anstieg",
                loss: "Abstieg",
                summary: "Zusammenfassung",
                tooltip: "Klicke, um Höhe anzuzeigen",
                download: "GPX herunterladen",
            }
        });

        elevationControl.addTo(map);

        fetch("{{ blogpost.activity.gpx.fullPath }}")
            .then(response => response.text())
            .then(gpxText => {
                // Parse GPX as XML
                const parser = new DOMParser();
                const xmlDoc = parser.parseFromString(gpxText, "application/xml");

                // Remove all <wpt> elements
                const waypoints = xmlDoc.getElementsByTagName("wpt");
                while (waypoints.length > 0) {
                    waypoints[0].parentNode.removeChild(waypoints[0]);
                }

                // Serialize the cleaned XML back to string
                const cleanedGpx = new XMLSerializer().serializeToString(xmlDoc);

                // Now load into Leaflet GPX
                const gpx = new L.GPX(cleanedGpx, {
                    async: true,
                    marker_options: {
                        startIconUrl: null,
                        endIconUrl: false,
                        shadowUrl: false,
                    },
                });

                gpx.on('loaded', function(e) {
                    map.fitBounds(e.target.getBounds());
                }).on('addline', function(e) {
                    elevationControl.addData(e.line);
                }).addTo(map);
            });
    }
</script>